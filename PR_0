# -*- coding: utf-8 -*-
"""PR_0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/168CEUKqV6K1fr8OcmrDDn6YUrOL0K5oY
"""

print('Hello World!')

# справка о функции
print?

# установка пакета мат. операций
!pip install numpy==1.18.5

# подключение к программе и переименование
import numpy as np

#ЗАДАНИЕ - вызов справки о функции

np.linspace?

#ТИПЫ ДАННЫХ - целочисленные, с плавающей точкой, булевы и комплексные, а также популярный тип None.
var_int = 3
var_float = 3.0
var_boolean = True
var_complex = 3+2j
var_none = None

#ТИПЫ ДАННЫХ - строковые

var_string = 'hello text'
var_another_string = "me too!"
var_multiline_string = '''
    big
    multiline
    string
'''

#ТИПЫ ДАННЫХ контейнерные - List (хранение набора данных)
var_list = [1, '111']
var_list[1]

var_list[0] = 501
var_list

var_list.index('111')

# ЗАДАНИЕ 
var_list.index(501)

var_list.index(1508)

var_list.append(1508)
var_list

# ТИПЫ ДАННЫХ контейнерные - Tuple (список, который не изменяется)
var_tuple = (1, '111', 'hey')
var_tuple

# ЗАДАНИЕ
var_tuple.append(19)

# ТИПЫ ДАННЫХ контейнерные - Dict (словарь - "уникальный ключ-значение")
var_dict = {
    'string_key': 'string_value',
    1: 'oh, integer key?'
}

var_dict['string_key']

var_dict['new_key'] = 'new_value'
var_dict

# ЗАДАНИЕ
var_new_dict = {
    'string_code': 'string_access',
    1: 'oh, integer code?'
}

var_new_dict['string_code']

var_dict.update(var_new_dict)

var_dict

# ТИПЫ ДАННЫХ контейнерные - Set (множество - хранит только уникальные значения)
var_set = {
    'no, keys',
    'only unique values!'
}

# ЗАДАНИЕ
new_set = {
    'no, keys',
    'are protection'
}

var_set | new_set

var_set & new_set

# ЦИКЛЫ - while
iter = 0
while iter < 10:
    print(iter)
    # Python не имеет операций инкремента/декремента (++/--)
    iter += 1

# ЦИКЛЫ - for
for iter in range(10):
    print(iter)

# ЗАДАНИЕ
spisok_list = ['hello', 'world', 1, 23435, 1+2]
for spisok in spisok_list:
    print(spisok)

# ФУНКЦИИ - суммирование
def summation(a, b):
    return a + b

result = summation(1, 4)

result

# ЗАДАНИЕ
def perimetr_rectangle(A, B):
    return A + B

perimeter = perimetr_rectangle(38, 42)
 perimeter

# КЛАССЫ и ОБЪЕКТЫ
class MyClass:
    def __init__(self, value):
        self.member_var = value
    
    def sample_method(self):
        print(f'sample_method() called with {self.member_var}')

my_object_1 = MyClass(10)
my_object_2 = MyClass(20)

my_object_1.sample_method()
my_object_2.sample_method()

# Обратимся к члену класса member_var конкретного объекта, модифицируем и выведем еще раз
my_object_1.member_var = 11
print('----- After modification -----')
my_object_1.sample_method()

sample_list = list([1, 2, 3])
# То же самое: sample_list = [1, 2, 3]

sample_list.append(10)

sample_list

# ЗАДАНИЕ

# подключение к программе и переименование
import math as mt

class MyNewClass:
    def maths_operation(self, x):
      result = 2 * mt.exp(x)
      print(result)

new_object_1 = MyNewClass()
#new_object_1.maths_operation(2)

i = 0
for i in range(4,13):
  new_object_1.maths_operation(i)

# ФОРМАТИРОВАННЫЕ СТРОКИ

name = 'Юзер'
age = 30

template_string = 'Привет, меня зовут %s и мне %d'
formatted_string = template_string % (name, age)
print(formatted_string)

# То же самое, только раньше мы сохранили строку в переменную,
#   а сейчас сразу в вывод
print('Привет, меня зовут %s и мне %d' % (name, age))

print('Привет, меня зовут {} и мне {}'.format(name, age))

print(f'Привет, меня зовут {name} и мне {age}')

# Для %f можно задать количество цифр после запятой
var = 0.33333333
print('Сравним %f, %.2f, %.1f' % (var, var, var))

var = 0.444444444
print('Сравним {}, {:.2f}, {:.1f}'.format(var, var, var))

# Обратите внимание на округление!
var = 0.173456
print(f'Сравним {var}, {var:.2f}, {var:.1f}')

# ЗАДАНИЕ

name = 'Asya'
age = 23
avg_grade = 5

def show_info(name, age, avg_grade):
  
  print('Добрый день! Мое имя: %s, возраст %d, оценка: %d. Приятно познакомиться!' % (name, age, avg_grade))
  print('Добрый день! Мое имя: {}, возраст {}, оценка: {}. Приятно познакомиться!'.format(name, age, avg_grade))
  print(f'Добрый день! Мое имя: {name}, возраст {age}, оценка: {avg_grade}. Приятно познакомиться!')

show_info(name, age, avg_grade)
